{
	"info": {
		"_postman_id": "7f09f2d7-d4d2-41ba-a66f-1b78b2c79600",
		"name": "GoRest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23766478"
	},
	"item": [
		{
			"name": "List Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"The response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(user) {",
							"    pm.expect(user).to.have.property('id');",
							"    pm.expect(user).to.have.property('name');",
							"    pm.expect(user).to.have.property('email');",
							"    pm.expect(user).to.have.property('gender');",
							"    pm.expect(user).to.have.property('status');",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(user) {",
							"        pm.expect(user.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Response content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(user) {",
							"        pm.expect(user.id).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer ACCESS-TOKEN",
						"disabled": true
					}
				],
				"url": {
					"raw": "https://gorest.co.in/public/v2/users",
					"protocol": "https",
					"host": [
						"gorest",
						"co",
						"in"
					],
					"path": [
						"public",
						"v2",
						"users"
					]
				},
				"description": "Generated from cURL: curl -i -H \"Accept:application/json\" -H \"Content-Type:application/json\" -H \"Authorization: Bearer ACCESS-TOKEN\" -XGET \"https://gorest.co.in/public/v2/users\""
			},
			"response": []
		},
		{
			"name": "List Specific Users Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response body is an empty array\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData).to.be.an('array').that.is.empty;",
							"});",
							"",
							"",
							"pm.test(\"Authorization header is present in the request\", function () {",
							"    pm.expect(pm.request.headers.has(\"Authorization\")).to.be.true;",
							"});",
							"",
							"",
							"pm.test(\"Validate the request URL is correct\", function () {",
							"    pm.expect(pm.request.url.toString()).to.equal(\"https://gorest.co.in/public/v2/users/7373665/posts\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer ACCESS-TOKEN",
						"disabled": true
					}
				],
				"url": {
					"raw": "https://gorest.co.in/public/v2/users/7373665/posts",
					"protocol": "https",
					"host": [
						"gorest",
						"co",
						"in"
					],
					"path": [
						"public",
						"v2",
						"users",
						"7373665",
						"posts"
					]
				},
				"description": "Generated from cURL: curl -i -H \"Accept:application/json\" -H \"Content-Type:application/json\" -H \"Authorization: Bearer ACCESS-TOKEN\" -XGET \"https://gorest.co.in/public/v2/users\""
			},
			"response": []
		},
		{
			"name": "List Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"Response must have the required Content-Type header with value application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Message field is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Message field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response does not contain sensitive information\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.not.have.any.keys('token', 'password', 'credit_card_number');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer ACCESS-TOKEN"
					}
				],
				"url": {
					"raw": "https://gorest.co.in/public/v2/posts",
					"protocol": "https",
					"host": [
						"gorest",
						"co",
						"in"
					],
					"path": [
						"public",
						"v2",
						"posts"
					]
				},
				"description": "Generated from cURL: curl -i -H \"Accept:application/json\" -H \"Content-Type:application/json\" -H \"Authorization: Bearer ACCESS-TOKEN\" -XGET \"https://gorest.co.in/public/v2/users\""
			},
			"response": []
		},
		{
			"name": "List Todos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(todo) {",
							"        pm.expect(todo).to.include.all.keys('id', 'user_id', 'title', 'due_on', 'status');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Due_on date format is valid\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(todo) {",
							"    pm.expect(todo.due_on).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Title is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(todo) {",
							"        pm.expect(todo.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Status is a valid status code\", function () {",
							"  pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://gorest.co.in//public/v2/todos",
					"protocol": "https",
					"host": [
						"gorest",
						"co",
						"in"
					],
					"path": [
						"",
						"public",
						"v2",
						"todos"
					]
				}
			},
			"response": []
		}
	]
}